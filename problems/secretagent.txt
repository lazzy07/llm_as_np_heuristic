/**
 * Secret Agent
 *
 * This domain is a the third introduced in Mark Riedl's 2004 dissertation on
 * narrative planning. It tells the story of a secret agent who infiltrates a
 * guarded compound to assassinate an evil mastermind. This domain was adapted
 * by Stephen G. Ware in 2023 for Sabre. The original 'move' and
 * 'move-through-guards' actions have been combined into a single 'move' action
 * using a disjunctive precondition. Likewise, the 'pickup-weapon' action has
 * been removed; 'pickup' is sufficient because the 'move' action uses an
 * existential quantifier to check whether the moving character is armed. The
 * original domain did not specify the location of the gun in order to
 * showcase Riedl's concept of initial state revision, which allowed the
 * planner to set some features of the initial state according to the needs of
 * the story. A similar concept has been encoded into this domain via the new
 * 'find' action, which says that if an item's location is unknown, it can be
 * found at any location. This allows the planner to place the gun as needed.
 *
 * Shortest solution (author temporal limit 8; character temporal limit 8;
 * epistemic limit 1):
 *   move(SecretAgent, Headquarters, Dropbox)
 *   pickup(SecretAgent, Papers, Dropbox)
 *   move(SecretAgent, Dropbox, Courtyard)
 *   move(SecretAgent, Courtyard, Lobby)
 *   find(SecretAgent, Gun, Lobby)
 *   pickup(SecretAgent, Gun, Lobby)
 *   move(SecretAgent, Lobby, Office)
 *   kill(SecretAgent, Mastermind, Gun, Office)
 *
 * The preferred citation for the origin of this domain is:
 *   Mark Owen Riedl, "Narrative planning: balancing plot and character,"
 *   dissertation, North Carolina State University, 2004.
 */

type location;
type character : location;
type place : location;
type status;
type item;
type weapon : item;

entity Headquarters : place;
entity Dropbox : place;
entity Lobby : place;
entity Office : place;
entity Cache : place;
entity Courtyard : place;
entity Unguarded : status;
entity Guarded : status;
entity SecretAgent : character;
entity Mastermind : character;
entity Papers : item;
entity Gun : weapon;

property path(from : place, to : place) : status;
property alive(character : character) : boolean;
property at(character : character) : place;
property at(item : item) : location;

path(Headquarters, Dropbox) = Unguarded;
path(Headquarters, Courtyard) = Unguarded;
path(Dropbox, Courtyard) = Unguarded;
path(Courtyard, Lobby) = Guarded;
path(Lobby, Cache) = Unguarded;
path(Lobby, Office) = Unguarded;
path(Cache, Office) = Unguarded;
alive(SecretAgent);
at(SecretAgent) = Headquarters;
alive(Mastermind);
at(Mastermind) = Office;
at(Papers) = Dropbox;
believes(Mastermind, at(SecretAgent) = ?);

action move(character : character, from : place, to : place) {
	precondition:
		from != to &
		(
			path(from, to) == Unguarded |
			(path(from, to) == Guarded & at(Papers) == character & !exists(w : weapon) at(w) == character)
		) &
		alive(character) &
		at(character) == from;
	effect:
		at(character) = to;
	consenting: character;
	observing(c : character): alive(c) & (at(c) == from | at(c) == to);
};

action pickup(character : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(item) == place;
	effect:
		at(item) = character;
	consenting: character;
	observing(c : character): alive(c) & at(c) == place;
};

action kill(killer : character, victim : character, weapon : weapon, place : place) {
	precondition:
		alive(killer) &
		at(killer) == place &
		alive(victim) &
		at(victim) == place &
		at(weapon) == killer;
	effect:
		!alive(victim);
	consenting: killer;
	observing(c : character): alive(c) & at(c) == place;
};

action find(character : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(item) == ?;
	effect:
		at(item) = place;
	consenting: character;
	observing(c : character): alive(c) & at(c) == place;
};

trigger see_alive(character : character, other : character, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		alive(other) &
		at(other) == place &
		believes(character, !alive(other));
	effect:
		believes(character, alive(other));
};

trigger see_dead(character : character, other : character, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		!alive(other) &
		at(other) == place &
		believes(character, alive(other));
	effect:
		believes(character, !alive(other));
};

trigger see_item_at(character : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(item) == place &
		believes(character, at(item) != place);
	effect:
		believes(character, at(item) = place);
};

trigger see_item_not_at(character : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(item) != place &
		believes(character, at(item) == place);
	effect:
		believes(character, at(item) = ?);
};

trigger see_has_item(character : character, other : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(other) == place &
		at(item) == other &
		believes(character, at(item) != other);
	effect:
		believes(character, at(item) = other);
};

trigger see_hasnt_item(character : character, other : character, item : item, place : place) {
	precondition:
		alive(character) &
		at(character) == place &
		at(other) == place &
		at(item) != other &
		believes(character, at(item) == other);
	effect:
		believes(character, at(item) = ?);
};

utility(): !alive(Mastermind);

utility(SecretAgent): !alive(Mastermind);

utility(Mastermind): alive(Mastermind);